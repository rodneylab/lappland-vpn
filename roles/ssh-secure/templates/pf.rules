## Interfaces
services = "lo100"
warp = "wg10"
wguard = "wg0"

## Ports
lappland_wg_tcp_ports = "{ 443, 53, {{ ssh_port }}, 9090 }"
lappland_wg_udp_ports = "{ 443, 3478, 53 }"
local_services_tcp_ports = "{ 443, 53 }"
local_services_udp_ports = "{ 443, 53, 123 }"
public_tcp_ports = \
  "{ 53, 443, 80, 43, 22, 993, 465, 853, 2083, 2096, 5223, 1551, 9600, 587, 5432 }"
public_udp_ports = "{ 53, 51820, 8443, 3478, 443, 123 }"
ssh_port = "{{ ssh_port }}"
unpriv_ports = "1024:65535"
vpn_wg_tcp_ports = \
  "{ 443, 80, 993, 853, 465, 22, 2083, 2096, 43, 5223, 1551, 9600, 587, 5432 }"
vpn_wg_udp_ports = "{ 123, 53, 3478, 51820 }"

# Tables
table <blocklist> persist file "/etc/pf/blocklist"
table <cloudflare-ip-list> persist file "/etc/pf/cloudflare-ip-list"
table <ssh_clients_public> persist { {{ ssh_clients }} }
table <wguard_peers_public> persist { {{ wireguard_peers }} }

# Options
set block-policy drop
set fingerprints "/etc/pf.os"
set optimization normal
set syncookies adaptive (start 25%, end 12%)
set limit { states 30000, table-entries 250000 }
set state-policy if-bound
set ruleset-optimization basic
set skip on lo0

# Normalisation
match in all scrub (no-df random-id max-mss 1420)
match in on $wguard scrub (no-df random-id max-mss 1340)
match in on $warp scrub (no-df random-id max-mss 1240)

# Queuing
# see /etc/pf.conf

# Translation
match out on egress inet tagged WG_PEER_INTERNET \
  nat-to (egress:0) port 1024:65535 tag WG_PEER_INTERNET_NAT
pass out on egress inet tagged WG_PEER_INTERNET_NAT
match out on $warp from $wguard:network to ! $wguard:network \
  nat-to $warp port 1024:65535

# Filtering
block drop in log quick from no-route to any
block drop in log quick from urpf-failed label uRPF
block log quick from any to lo0:network
block in log quick on egress from any to <martians>
block return out log on egress from any to <martians>
block drop log on { egress $warp $wguard }
block log quick from any to <blocklist>
antispoof log quick for { egress $warp $wguard }
block drop in log quick inet from any to localhost

# block stateless IPv4 traffic
block return log inet all

# ddos reset block
pass in log proto tcp from any to any flags R/R \
  modulate state (max-src-conn-rate 2/1)

# ssh block
block in log quick proto tcp from <brutes> to any label BRUTES_FROM_EXTERNAL

pass in quick on egress proto udp from <wguard_peers_public> \
  to egress:0 port = {{ wireguard_port }}
pass out quick on egress inet proto udp from egress:0 \
  to <cloudflare-ip-list> port = {{ warp_wguard_port.stdout }}
pass out quick on egress proto tcp from egress:0 to any port $public_tcp_ports
pass out quick on egress proto udp from egress:0 to any port $public_udp_ports
pass out quick on $warp proto tcp from $warp:0 to any port $public_tcp_ports
pass out quick on $warp proto udp from $warp:0 to any port $public_udp_ports
#pass in on egress proto tcp from <ssh_clients_public> \
#  to egress:0 port $ssh_port flags S/SA modulate state \
#  (max-src-conn 5, max-src-conn-rate 5/60, overload <brutes> flush global)

block in log on $wguard from $wguard:network to $wguard:network
pass in quick on $wguard proto tcp from $wguard:network port $unpriv_ports \
  to $services:0 port $local_services_tcp_ports modulate state \
  (max-src-conn 10, max-src-conn-rate 30/60, overload <overactive_hosts> flush)
pass in quick on $wguard proto udp from $wguard:network port $unpriv_ports \
  to $services:0 port $local_services_udp_ports keep state \
  (max-src-conn 10, max-src-conn-rate 30/60, overload <overactive_hosts> flush)
pass in quick on $wguard proto tcp from $wguard:network port $unpriv_ports \
  to $wguard:0 port $ssh_port flags S/SA modulate state \
  (max-src-conn 5, max-src-conn-rate 5/60, overload <brutes> flush global)

pass in quick on $wguard proto tcp from $wguard:network \
  to { ! $wguard:network, ! $services:0 } port $vpn_wg_tcp_ports \
  route-to ($warp $warp:network) \
  modulate state (if-bound) tag WARP_OUT
pass in quick on $wguard proto udp from $wguard:network \
  to { ! $wguard:network, ! $services:0 } port $vpn_wg_tcp_ports \
  route-to ($warp $warp:network) \
  keep state (if-bound) tag WARP_OUT
pass in on $wguard proto tcp from $wguard:network \
  to ! $wguard:network port $vpn_wg_tcp_ports modulate state (if-bound) \
  tag WG_PEER_INTERNET
pass in on $wguard proto udp from $wguard:network \
  to ! $wguard:network port $vpn_wg_udp_ports keep state (if-bound) \
  tag WG_PEER_INTERNET

pass out on egress proto udp from egress:0 port 67:68 \
  to 169.254.169.254 port 67:68

block drop log quick proto tcp from any to any flags R/R
